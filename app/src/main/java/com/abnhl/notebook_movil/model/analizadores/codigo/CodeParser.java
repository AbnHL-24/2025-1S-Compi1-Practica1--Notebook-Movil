
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.abnhl.notebook_movil.model.analizadores.codigo;

import java_cup.runtime.*;
import java_cup.runtime.Symbol.*;
import java.util.LinkedList;
import java.util.ArrayList;
import com.abnhl.notebook_movil.model.interprete.codigo.simbolo.*;
import com.abnhl.notebook_movil.model.interprete.codigo.excepciones.*;
import com.abnhl.notebook_movil.model.interprete.codigo.abstracto.*;
import com.abnhl.notebook_movil.model.interprete.codigo.expresiones.*;
import com.abnhl.notebook_movil.model.interprete.codigo.expresiones.operadores.*;
import com.abnhl.notebook_movil.model.interprete.codigo.expresiones.operadores.aritmeticos.*;
import com.abnhl.notebook_movil.model.interprete.codigo.instrucciones.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CodeParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public CodeParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CodeParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CodeParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\020\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\007\006" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\034\000\004\004\004\001\002\000\004\020\013\001" +
    "\002\000\006\002\ufffe\004\ufffe\001\002\000\006\002\000" +
    "\004\004\001\002\000\006\002\ufffd\004\ufffd\001\002\000" +
    "\004\002\011\001\002\000\004\002\001\001\002\000\006" +
    "\002\uffff\004\uffff\001\002\000\012\020\014\024\017\025" +
    "\021\026\020\001\002\000\012\020\014\024\017\025\021" +
    "\026\020\001\002\000\016\012\024\013\026\014\023\015" +
    "\027\016\025\021\022\001\002\000\016\012\ufff5\013\ufff5" +
    "\014\ufff5\015\ufff5\016\ufff5\021\ufff5\001\002\000\016\012" +
    "\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\021\ufff4\001\002" +
    "\000\016\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\021" +
    "\ufff2\001\002\000\016\012\ufff3\013\ufff3\014\ufff3\015\ufff3" +
    "\016\ufff3\021\ufff3\001\002\000\006\002\ufffc\004\ufffc\001" +
    "\002\000\012\020\014\024\017\025\021\026\020\001\002" +
    "\000\012\020\014\024\017\025\021\026\020\001\002\000" +
    "\012\020\014\024\017\025\021\026\020\001\002\000\012" +
    "\020\014\024\017\025\021\026\020\001\002\000\012\020" +
    "\014\024\017\025\021\026\020\001\002\000\016\012\ufff8" +
    "\013\ufff8\014\ufff8\015\ufff8\016\025\021\ufff8\001\002\000" +
    "\016\012\ufffa\013\ufffa\014\023\015\027\016\025\021\ufffa" +
    "\001\002\000\014\012\ufff7\013\ufff7\014\ufff7\015\ufff7\021" +
    "\ufff7\001\002\000\016\012\ufffb\013\026\014\023\015\027" +
    "\016\025\021\ufffb\001\002\000\016\012\ufff9\013\ufff9\014" +
    "\ufff9\015\ufff9\016\025\021\ufff9\001\002\000\016\012\024" +
    "\013\026\014\023\015\027\016\025\021\036\001\002\000" +
    "\016\012\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\021\ufff6" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\034\000\012\002\007\003\005\004\004\007\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\011" +
    "\007\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\014\006\015" +
    "\001\001\000\006\005\034\006\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\033\006" +
    "\015\001\001\000\006\005\032\006\015\001\001\000\006" +
    "\005\031\006\015\001\001\000\006\005\030\006\015\001" +
    "\001\000\006\005\027\006\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CodeParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CodeParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CodeParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    CodeLexer codeLexer;
    CodeParser(CodeLexer codeLexer) { this.codeLexer = codeLexer; }

    public static Tipo Tipo(TipoDato tipoDato) {
            return new Tipo(tipoDato);
    }

    /*// Errores recuperables.
    public void syntax_error(Symbol s) {
        erroresSintacticos.add(new ErroresExpresiones("SINTÁCTICO RECUPERABLE",
                    "No se esperaba el componente " + s.value,
                    s.left,
                    s.right));
    }

    // Errores no recuperables.
    public void unrecovered_syntax_error(Symbol s) {
        erroresSintacticos.add(new ErroresExpresiones("SINTÁCTICO NO RECUPERABLE",
                    "No se esperaba el componente "+s.value,
                    s.left,
                    s.right));
    }*/


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CodeParser$actions {



  private final CodeParser parser;

  /** Constructor */
  CUP$CodeParser$actions(CodeParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CodeParser$do_action_part00000000(
    int                        CUP$CodeParser$act_num,
    java_cup.runtime.lr_parser CUP$CodeParser$parser,
    java.util.Stack            CUP$CodeParser$stack,
    int                        CUP$CodeParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CodeParser$result;

      /* select the action based on the action number */
      switch (CUP$CodeParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).value;
		RESULT = start_val;
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CodeParser$parser.done_parsing();
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$CodeParser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$CodeParser$stack.peek()).value;
		 RESULT = new LinkedList<Instruccion>();
                                   RESULT.add(a); 
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= IMPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$CodeParser$stack.peek()).value;
		 RESULT = a; 
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IMPRESION ::= PRINT PARENT_IZQ EXPRESION PARENT_DER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).value;
		 RESULT = new ImprimirInst(a, aleft, aright); 
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("IMPRESION",5, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-3)), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$CodeParser$stack.peek()).value;
		 RESULT = new SumaExpr(a, b, aleft, aright); 
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$CodeParser$stack.peek()).value;
		 RESULT = new RestaExpr(a, b, aleft, aright); 
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // EXPRESION ::= EXPRESION MULT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$CodeParser$stack.peek()).value;
		 RESULT = new MultiplicacionExpr(a, b, aleft, aright); 
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // EXPRESION ::= EXPRESION DIV EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$CodeParser$stack.peek()).value;
		 RESULT = new DivisionExpr(a, b, aleft, aright); 
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EXPRESION ::= EXPRESION POW EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$CodeParser$stack.peek()).value;
		 RESULT = new PotenciaExpr(a, b, aleft, aright); 
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EXPRESION ::= PARENT_IZQ EXPRESION PARENT_DER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).value;
		 RESULT = a; 
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXPRESION ::= EXPRESIONES_NATIVAS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$CodeParser$stack.peek()).value;
		 RESULT = a; 
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXPRESIONES_NATIVAS ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$CodeParser$stack.peek()).value;
		 RESULT = new NativoExpr(Double.parseDouble(a), Tipo(TipoDato.DECIMAL), aleft, aright); 
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NATIVAS",4, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXPRESIONES_NATIVAS ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$CodeParser$stack.peek()).value;
		 RESULT = new NativoExpr(Integer.parseInt(a), Tipo(TipoDato.ENTERO), aleft, aright); 
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NATIVAS",4, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXPRESIONES_NATIVAS ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$CodeParser$stack.peek()).value;
		 RESULT = new NativoExpr(a, Tipo(TipoDato.CADENA), aleft, aright); 
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES_NATIVAS",4, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CodeParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CodeParser$do_action(
    int                        CUP$CodeParser$act_num,
    java_cup.runtime.lr_parser CUP$CodeParser$parser,
    java.util.Stack            CUP$CodeParser$stack,
    int                        CUP$CodeParser$top)
    throws java.lang.Exception
    {
              return CUP$CodeParser$do_action_part00000000(
                               CUP$CodeParser$act_num,
                               CUP$CodeParser$parser,
                               CUP$CodeParser$stack,
                               CUP$CodeParser$top);
    }
}

}
