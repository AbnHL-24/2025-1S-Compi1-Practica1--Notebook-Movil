package com.abnhl.notebook_movil.model.analizadores.codigo;

// Importaciones principales.
import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.ArrayList;
import com.abnhl.notebook_movil.model.interprete.codigo.simbolo.*;
import com.abnhl.notebook_movil.model.interprete.codigo.excepciones.*;
import com.abnhl.notebook_movil.model.interprete.codigo.abstracto.*;
// Expresiones.
import com.abnhl.notebook_movil.model.interprete.codigo.expresiones.*;
// Instrucciones.
import com.abnhl.notebook_movil.model.interprete.codigo.instrucciones.*;
// Excepciones y errores.

parser code
{:
    CodeLexer codeLexer;
    CodeParser(CodeLexer codeLexer) { this.codeLexer = codeLexer; }

    /*// Errores recuperables.
    public void syntax_error(Symbol s) {
        erroresSintacticos.add(new ErroresExpresiones("SINTÁCTICO RECUPERABLE",
                    "No se esperaba el componente " + s.value,
                    s.left,
                    s.right));
    }

    // Errores no recuperables.
    public void unrecovered_syntax_error(Symbol s) {
        erroresSintacticos.add(new ErroresExpresiones("SINTÁCTICO NO RECUPERABLE",
                    "No se esperaba el componente "+s.value,
                    s.left,
                    s.right));
    }*/
:}

action code
{:
:}

// Simbolos terminales.
terminal MAS, MENOS, MULT, DIV, POW, UMENOS;
terminal ASIGNACION, PARENT_IZQ, PARENT_DER, PUNTO;
terminal String ID, DECIMAL, ENTERO, CADENA; // Van como String porque necesito acceder a su valor.

// Simbolos no terminales.
nonterminal INICIO;
nonterminal INSTRUCCIONES, INSTRUCCION;

// Precedencias.
precedence left MAS;
precedence left MENOS;
precedence left MULT, DIV;
precedence nonassoc POW;
precedence left PARENT_IZQ, PARENT_DER;
precedence right UMENOS;

start with INICIO;
// Definición de la gramática.
INICIO ::= INSTRUCCIONES;

INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION // Gramatica ascendente, recursiva por la izquierda.
                | INSTRUCCION              // Cup trabaja con gramaticas ascendentes.
;

INSTRUCCION ::= IMPRESION
;

IMPRESION ::= PRINT PARENT_IZQ EXPRESION:a PARENT_DER
;

EXPRESION ::= MENOS EXPRESION:a %prec UMENOS
            | EXPRESION MAS EXPRESION
            | EXPRESION MENOS EXPRESION
            | EXPRESION MULT EXPRESION
            | EXPRESION DIV EXPRESION
            | EXPRESION POW EXPRESION
            | EXPRESIONES_NATIVAS {: RESULT = a; :}
            | ID
            | PARENT_IZQ EXPRESION:a PARENT_DER {: RESULT = a; :}
;

EXPRESIONES_NATIVAS ::= DECIMAL:a {: RESULT = new NativoExpr(Double.parseDouble(a), Tipo(TipoDato.DECIMAL), aleft, aright); :}
                      | ENTERO:a {: RESULT = new NativoExpr(Integer.parseInt(a), Tipo(TipoDato.ENTERO), aleft, aright); :}
                      | CADENA:a {: RESULT = new NativoExpr(a, Tipo(TipoDato.CADENA), aleft, aright); :}
;